// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5250.MrPez;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainSpeedController0;
    public static SpeedController driveTrainSpeedController1;
    public static RobotDrive driveTrainRobotDrive;
    public static AnalogInput driveTrainUltrasonic0;
    public static CANJaguar pezCANJaguar2;
    public static AnalogPotentiometer pezAnalogPotentiometer1;
    public static SpeedController pezSpeedController2;
    public static PIDController pezPIDController0;
    public static DigitalInput pezHallEffect0;
    public static SpeedController pezSpeedController3;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainSpeedController0 = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "SpeedController0", (Talon) driveTrainSpeedController0);
        
        driveTrainSpeedController1 = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "SpeedController1", (Talon) driveTrainSpeedController1);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainSpeedController0, driveTrainSpeedController1);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(1.0);

        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);        

        driveTrainUltrasonic0 = new AnalogInput(0);
        LiveWindow.addSensor("DriveTrain", "Ultrasonic0", driveTrainUltrasonic0);
        
        pezCANJaguar2 = new CANJaguar(2);
        
        
        pezAnalogPotentiometer1 = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("Pez", "AnalogPotentiometer1", pezAnalogPotentiometer1);
        
        pezSpeedController2 = new Talon(2);
        LiveWindow.addActuator("Pez", "SpeedController2", (Talon) pezSpeedController2);
        
        pezPIDController0 = new PIDController(1.0, 0.0, 0.0, 0.0, pezAnalogPotentiometer1, pezSpeedController2, 0.02);
        LiveWindow.addActuator("Pez", "PIDController0", pezPIDController0);
        pezPIDController0.setContinuous(false); pezPIDController0.setAbsoluteTolerance(0.2); 
        pezPIDController0.setOutputRange(-1.0, 1.0);        

        pezHallEffect0 = new DigitalInput(0);
        LiveWindow.addSensor("Pez", "HallEffect0", pezHallEffect0);
        
        pezSpeedController3 = new Talon(3);
        LiveWindow.addActuator("Pez", "SpeedController3", (Talon) pezSpeedController3);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
